{"version":3,"sources":["components/Wrapper/Wrapper.js","components/FriendsCard/FriendsCard.js","components/Scoreboard/Scoreboard.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","FriendsCard","onClick","clickedImage","id","alt","name","src","image","Scoreboard","title","topScore","score","shuffle","array","i","length","j","Math","floor","random","_ref","Game","state","showAlert","showSuccess","friends","clickedfriends","console","log","_this","setState","indexOf","push","handleIncrement","makeShuffle","_this2","this","Scoreboard_Scoreboard","Wrapper_Wrapper","map","friend","FriendsCard_FriendsCard","key","React","Component","App","components_Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8a2993d5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\nimport \"../Game/Game.js\";\n\n\nfunction FriendsCard(props) {\n    return ( \n//    const FriendsCard = props => (\n         <div className=\"card\" >\n            <div className=\"img-container\" onClick={() => props.clickedImage(props.id)}>\n                <img alt={props.name} src={props.image}/>\n               \n            </div>\n\n        </div>\n        \n    );\n}\n\nexport default FriendsCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Scoreboard(props) {\n  return (\n    <header className=\"scoreB\">\n      <div className=\"row\">\n        <div className=\"col-md-6 col-left\"><h5>{props.title}</h5></div>\n        <div className=\"col-md-3 col-right\"><h6>High Score {props.topScore}</h6></div>\n        <div className=\"col-md-3 col-right\"><h6>Current Score: {props.score}</h6></div>\n      </div>\n      <div className=\"row\">\n      <div className=\"col-md-12 col-right\">\n      <h6 id= \"note\">Click on a Image, but don't click on it more than once!</h6></div>\n      </div>\n    </header>\n  );\n}\nexport default Scoreboard;","import React from \"react\";\nimport Wrapper from \"../Wrapper/Wrapper\";\nimport FriendsCard from \"../FriendsCard/FriendsCard.js\";\nimport friends from \"../../friends.json\"\nimport Scoreboard from \"../Scoreboard/Scoreboard.js\";\n\n// shuffle upon each click\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nclass Game extends React.Component {\n\n  state = {\n    showAlert: 0,\n    showSuccess: 0,\n    score: 0,\n    topScore: 0,\n    friends,\n    clickedfriends: [],\n  };\n\n  clickedImage =id =>{\n    console.log(this.state.clickedfriends);\n    const clickedfriends = this.state.clickedfriends;\n    let score = this.state.score;\n    let topScore = this.state.topScore;\n    this.setState({showAlert: 0});\n\n    // if the clicked image has an id of the indexed images\n    if (clickedfriends.indexOf(id) === -1) {\n      // push that id into the array to be stored\n      clickedfriends.push(id);\n      console.log(clickedfriends);\n      // run the score function\n      this.handleIncrement();\n      // run the reshuffle function after each click\n      this.makeShuffle();\n    } else if (score === 12) {\n      // alert player wins\n      this.setState({\n        showSuccess: 1,\n        score: 0,\n        clickedfriends: []\n      });\n    } else {\n      // alert player loss\n      this.setState({\n        score: 0,\n        clickedfriends: []\n      });\n      console.log(\"duplicate\");\n      \n    }\n\n    if (score > topScore) {\n      this.setState({\n        topScore: score\n      });\n    }\n  };\n\n\n  handleIncrement = () => {\n\n    this.setState({ score: this.state.score + 1 });\n  };\n\n   // shuffle up images\n   makeShuffle = () => {\n    this.setState({ friends: shuffle(friends) });\n  };\n\n  render() {\n    return (\n      <div>\n        <Scoreboard\n          title=\"Simpsons Clicky Game\"\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n\n        <Wrapper>\n\n          {this.state.friends.map(friend => (\n            <FriendsCard\n              id={friend.id}\n              key={friend.id}\n              name={friend.name}\n              image={friend.image}\n              clickedImage={this.clickedImage}\n\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n  }\n\nexport default Game;\n","import React, { Component } from 'react';\nimport Game from \"./components/Game/Game.js\";\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}